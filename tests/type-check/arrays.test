{} :: {}; //TODO: fix testcase parser so you can have a comment on the first line
//TODO: add support for new Array<int>, etc.

function (arry) :: (Array<int> -> int) {
  return (5)[13];
} @@ fails;
function (arry) :: (Array<int> -> int) {
  return arry[arry];
} @@ fails;
function (arry) :: (Array<int> -> int) {
  return arry[arry[0]];
} :: (Array<int>->int);

//sum:
function (arry) :: (Array<int> -> int) {
  var sum :: int = 0;
  for (var indx = 0; indx < arry.length; ++indx) {
    sum += arry[indx];
  }
  return sum;
} :: (Array<int> -> int);

//monomorphic map:
function (int2str, arry) :: ((int -> string), Array<int> -> Array<string>) {
  var rezarray :: Array<string>; //todo: add a way to instantiate an array. this code WILL FAIL OTHERWISE
  for (var i=0; i < arry.length; ++i) {
    rezarray[i] = int2str(arry[i]);
  }
  return rezarray;
} :: ((int -> string), Array<int> -> Array<string>);

//monomorphic filter:
function (int2bool, arry) :: ((int -> bool), Array<int> -> Array<int>)  {
  var rezarray :: Array<int>;
  var ri = 0;
  for (var i=0; i < arry.length; ++i) {
    if (int2bool(arry[i]))
      rezarray[ri++] = arry[i];
  }
  return rezarray;
} :: ((int -> bool), Array<int> -> Array<int>);

//Array subtypes:
function () :: (-> Array<int>) {
  var z :: Array<int>;
  var y :: Array<double>;
  y = z;
  return z;
} :: (-> Array<int>);

//arrays of objects:
//TODO: make these use iterators once those work.
//TODO: write a version with polymorphic map once that exists.
function (ptarray) :: (Array<{x :: int, y :: int, mag :: (-> double)}> -> Array<double>) {
  var resarray :: Array<double>;
  for (var i=0; i < ptarray.length; ++i)
    resarray[i] = ptarray[i].mag();
  return resarray;
} :: (Array<{x :: int, y :: int, mag :: (-> double)}> -> Array<double>);

function (ptarray) :: (Array<{x :: int, y :: int, mag :: (-> double)}> -> Array<double>) {
  function map(pt2dub, arry) :: (({x :: int, y :: int, mag :: (-> double)} -> double), 
                                 Array<{x :: int, y :: int, mag :: (-> double)}> -> 
                                 Array<double>) {
    var rezarray :: Array<double>; //todo: add a way to instantiate an array. this code WILL FAIL OTHERWISE
    for (var i=0; i < arry.length; ++i) {
      rezarray[i] = pt2dub(arry[i]);
    }
    return rezarray;
  }

  //TODO: is really annoying to re-specify the pt type everywhere.
  return map(function (pt) :: ({x :: int, y :: int, mag :: (-> double)} -> double) { return pt.mag(); },
             ptarray);
} :: (Array<{x :: int, y :: int, mag :: (-> double)}> -> Array<double>);

