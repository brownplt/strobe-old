//*** means something messed up cause of assignment/mutation being restrictive
//### means something messed up cause of lack of parametrized things
//@@@ means substType captures fail
//$$$ means we need apply to work!
//%%% means we need latent predicates!
//^^^ means occurrence typing is failing
//xxx means i dnno what is going on
sealed type PulseVal :: {pulsevalhax :: int}; //###

type Pulse :: {stamp :: int, value :: PulseVal}; //###

type UpdaterT :: ((Pulse ->), Pulse ->); //### (should be parametrized)

//============

//the stuff 'this' has when leaving the constructor
type EventStream_constr_leave :: rec EventStream_constr_leave . {
  updater :: UpdaterT,
  sendsTo :: Array<EventStream>,
  rank :: int,
  ...
};

//the full type:
type EventStream :: rec EventStream . {
  updater :: UpdaterT,
  sendsTo :: Array<EventStream>,
  rank :: int,
  constantE :: ([EventStream] PulseVal -> EventStream),
  mergeE :: ([EventStream] Array<EventStream> -> EventStream),
  sendEvent :: ([EventStream] PulseVal -> ),
  bindE:: ([EventStream] (PulseVal -> EventStream) -> EventStream ),
  mapE :: ([EventStream] (PulseVal -> PulseVal) -> EventStream),
  notE :: ([EventStream] -> EventStream),
  filterE :: ([EventStream] (PulseVal -> bool) -> EventStream),
  onceE :: ([EventStream] -> EventStream),
  skipFirstE :: ([EventStream] -> EventStream),
  collectE :: ([EventStream] PulseVal, (PulseVal, PulseVal -> PulseVal)
                 -> EventStream),
  switchE :: ([EventStream] -> EventStream),
  ifE :: ([EventStream] EventStream, EventStream -> EventStream),
  andE :: ([EventStream] Array<EventStream> -> EventStream),
  orE :: ([EventStream] Array<EventStream> -> EventStream),

  filterRepeatsE :: ([EventStream] PulseVal? -> EventStream),

  //@@@ substType captures if we uncomment the following lines:
  //delayE :: ([EventStream] U(Behavior, int) -> EventStream),
  //snapshotE :: ([EventStream] Behavior -> EventStream),
  //calmE :: ([EventStream] U(Behavior, int) -> EventStream),
  //startsWith :: ([EventStream] PulseVal -> Behavior),

  ...
};

//@@@:
external startsWith :: (EventStream, PulseVal -> Behavior);

type Behavior_constr_leave :: {last :: PulseVal,
                               underlyingRaw :: EventStream,
                               underlying :: EventStream, ...};
type Behavior :: rec Behavior . {
  last :: PulseVal,
  underlyingRaw :: EventStream,
  underlying :: EventStream,
  valueNow :: ([Behavior] -> PulseVal),
  changes :: ([Behavior] -> EventStream),
  switchB :: ([Behavior] -> Behavior),
  delayB :: ([Behavior] U(Behavior, int), PulseVal? -> Behavior),
  sendBehavior :: ([Behavior] PulseVal ->),
  ...
};

//============
type TSNodeT :: {q::Array<EventStream>,
                 v::EventStream};

//hacks when i needs a typed var:
external $nodes :: Array<EventStream>;
external $updater :: ((Pulse ->), Pulse ->);
external $es :: EventStream;
external $pv :: PulseVal;
external $b :: Behavior;
//### uber hax to make up for $pv
external $pvcast :: forall a . (PulseVal -> a);

//slice: Array a * Integer * Integer -> Array a
var slice = function (arr, start, stop) ::
  forall a. Array<a>, int, int? -> Array<a> {
	var len = arr.length, r :: Array<a> = [];
	if( typeof stop == "undefined" ) { stop = len; }
	if( stop < 0 ) { stop = len + stop; }
	if( start < 0 ) { start = len - start; }
	if( stop < start ) { i = start; start = stop; stop = i; }
	for( var i = 0; i < stop - start; i++ ) { r[i] = arr[start+i]; }
	return r;
}

var isEqual = function (a,b) :: any, any -> bool {
	return (a == b) ||
		( (((typeof(a) == 'number') && isNaN(a)) || a == 'NaN') &&
		  (((typeof(b) == 'number') && isNaN(b)) || b == 'NaN') );
};

var forEach = function(fn,arr) :: forall a . (a -> any), Array<a> -> undefined {
  for (var i = 0 ; i < arr.length; i++) {
    fn(arr[i]);
  }
};

//member: a * Array b -> Boolean
var member = function(elt, lst) :: forall a b . a, Array<b> -> bool {
	for (var i = 0; i < lst.length; i++) {
		if (isEqual(lst[i], elt)) {return true;}
	}
	return false;
};

/*var zip = function(arrays) {
	if (arrays.length == 0) return [];
	var ret = [];
	for(var i=0; i<arrays[0].length;i++) {
		ret.push([]);
		for(var j=0; j<arrays.length;j++)
			ret[i].push(arrays[j][i]);
	}
	return ret;
}*/

//TODO once we have sequences:
/*var zip2 = function(array1,array2) ::
  forall a b. Array<a>, Array<b> -> Array<@[a,b]> {
};*/

/*//map: (a * ... -> z) * [a] * ... -> [z]
var map = function (fn) {
	var arrays = slice(arguments, 1);
	if (arrays.length === 0) { return []; }
	else if (arrays.length === 1) {
		var ret = [];
		for(var i=0; i<arrays[0].length; i++) {ret.push(fn(arrays[0][i]));}
		return ret;
	}
	else {
		var ret = zip(arrays);
		var o = new Object();
		for(var i=0; i<ret.length; i++) {ret[i] = fn.apply(o,ret[i]);}
		return ret;
	}
};*/

var map1 = function (fn, array) :: forall a b. (a->b), Array<a> -> Array<b> {
  var ret :: Array<b> = [];
  for (var i=0; i < array.length; i++) {
    ret.push(fn(array[i]));
  }
  return ret;
};

//filter: (a -> Boolean) * Array a -> Array a

//%%% with latent predicates, this could be more useful:
//filter: (a --b--> Boolean) * Array a -> Array b
var filter = function (predFn, arr) ::
      forall a . (a->bool), Array<a> -> Array<a> {
	var res :: Array<a> = [];
	for (var i = 0; i < arr.length; i++) {
		if (predFn(arr[i])) { res.push(arr[i]); }
	}
	return res;
};
/*
//fold: (a * .... * accum -> accum) * accum * [a] * ... -> accum
//fold over list(s), left to right
var fold = function(fn, init ) { //arrays
	var lists = slice(arguments, 2);
	if (lists.length === 0) { return init; }
	else if(lists.length === 1) {
		var acc = init;
		for(var i = 0; i < lists[0].length; i++) {
			acc = fn(lists[0][i],acc);
		}
		return acc;
	}
	else {
		var acc = init;
		for (var i = 0; i < lists[0].length; i++) {
			var args = map( function (lst) { return lst[i];},
	          lists);
			args.push(acc);
			acc = fn.apply({}, args);
		}
		return acc;
	}
};*/

var fold1 = function (fn, init, array) ::
      forall a b . (a, b -> b), b, Array<a> -> b {
  var acc = init;
  for (var i=0; i < array.length; i++) {
    acc = fn(array[i], acc);
  }
  return acc;
};

/* //not used anywhere, so ill type check it later.
//foldR: (a * .... * accum -> accum) * accum * [a] * ... -> accum
//fold over list(s), right to left, fold more memory efficient (left to right)
var foldR = function (fn, init ) { //arrays
  var lists = slice(arguments, 2);
	if (lists.length === 0) { return init; }
	else if(lists.length === 1) {
		var acc = init;
		for(var i=lists[0].length - 1; i > -1; i--)
			acc = fn(lists[0][i],acc);
		return acc;
	}
	else {
		var acc = init;
		for (var i = lists[0].length - 1; i > -1; i--) {
			var args = map( function (lst) { return lst[i];},
	          lists);
			args.push(acc);
			acc = fn.apply({}, args);
		}
		return acc;
	}
};
*/

//////////////////////////////////////////////////
// Flapjax core

//Pulse: Stamp * Path * Obj
var Pulse = function (stamp, value) :: int, PulseVal ~~> Pulse {
  // Timestamps are used by liftB (and ifE).  Since liftB may receive multiple
  // update signals in the same run of the evaluator, it only propagates the
  // signal if it has a new stamp.
  this.stamp = stamp;
  this.value = value;
};

var lastRank = 0;
var stamp = 1;

var nextStamp = function () :: (-> int) { return ++stamp; };

//comment was incorrect; this expects not an array of nodes, but a single node!
    //propagatePulse: Pulse * Array Node ->

//Send the pulse to each node
var propagatePulse = function (pulse, node) :: (Pulse, EventStream -> )
{
  //deal with PQ later.
  /*var queue = new PQ(); //topological queue for current timestep

  queue.insert({k:node.rank,n:node,v:pulse});
  while(!(queue.isEmpty())) {
	  var qv = queue.pop();
	  qv.n.updater(function(nextPulse) {
		  for(var i=0; i<qv.n.sendsTo.length;i++)
			  queue.insert({k:qv.n.sendsTo[i].rank,n:qv.n.sendsTo[i],v:nextPulse});
	  }, new Pulse(qv.v.stamp,qv.v.value));
  }*/
};


//Event: Array Node b * ( (Pulse a -> Void) * Pulse b -> Void)
var EventStream = function (nodes,updater) :: ([{...}]
     Array<EventStream>, UpdaterT ~~> EventStream_constr_leave)
{
    this.updater = updater;

    this.sendsTo = [nodes[0]]; //forward link. need empty array lit because
      //empty array lits are not implemented yet.

    this.rank = ++lastRank;
/*
    for (var i = 0; i < nodes.length; i++) {
      nodes[i].sendsTo.push(this);
    }*/
};

var createNode = function (nodes, updater) :: (
    Array<EventStream>, ((Pulse ->), Pulse ->) -> EventStream)
{
    //this function needs to see everything in the prototypes in order to
    //return a full EventStream object
    return new EventStream(nodes, updater);
};

//maybe we should allow syntax like the following for types:
//attachListener :: EventStream, EventStream -> undefined
//would be neater

//flow from node to dependent
//note: does not add flow as counting for rank nor updates parent ranks
var attachListener = function (node, dependent) :: EventStream, EventStream
                                                -> undefined
{
    node.sendsTo.push(dependent);
    if(node.rank > dependent.rank) {
      var lowest = lastRank+1;
      var q = [dependent];
      while(q.length) {
	var cur = q.splice(0,1)[0];
	cur.rank = ++lastRank;
	q = q.concat(cur.sendsTo);
      }
    }
};

//removeListener: Node * Node -> Boolean
//remove flow from node to dependent
//note: does not remove flow as counting for rank nor updates parent ranks
var removeListener = function (node, dependent) :: EventStream, EventStream
                                                -> bool
{
  var foundSending = false;
  for (var i = 0; i < node.sendsTo.length && !foundSending; i++) {
    if (node.sendsTo[i] == dependent) {
      node.sendsTo.splice(i, 1);
      foundSending = true;
    }
  }

  return foundSending;
};

// An internalE is a node that simply propagates all pulses it
// receives.  It's used internally by various combinators.

var internalE = function(dependsOn) :: Array<EventStream>? -> EventStream {
  var array :: Array<EventStream> = [];
  if (typeof dependsOn != "undefined") array = dependsOn;
  return createNode(array,
                    function(send,pulse) :: UpdaterT { send(pulse); });
}

//throw gives a 'stmt unreachable' error, so comment it out fer now.
var zeroE = function() :: -> EventStream {
  //really gotta make empty litz work.
  var array :: Array<EventStream> = [];
  return createNode(array,
                    function(send,pulse) :: UpdaterT {
     /* throw ('zeroE : received a value; zeroE should not receive a value; the value was ' + pulse.value);*/
  });
};

//sendEvent moved up:
//
//note that this creates a new timestamp and new event queue
var sendEvent = function (node, value) :: EventStream, PulseVal -> undefined {
  propagatePulse(new Pulse(nextStamp(), value), node);
};


var oneE = function(val) :: PulseVal -> EventStream {
  var array :: Array<EventStream> = [];
  var sent = false;
  var evt = createNode(array,function(send,pulse) :: UpdaterT {
    if (sent) {
      throw ('oneE : received an extra value');
    }
    sent = true;
    send(pulse);
  });
  window.setTimeout(function() :: (->) { sendEvent(evt,val); },0);
  return evt;
};

//modified to take one array arg instead of varargs.
// a.k.a. mplus; mergeE(e1,e2) == mergeE(e2,e1)
var mergeE = function(arry) :: Array<EventStream> -> EventStream {
  if (arry.length == 0) {
    return zeroE();
  }
  else {
    var deps = slice@[(EventStream)](arry,0);
    return internalE(deps);
  }
};

EventStream.prototype.sendEvent = function (value) ::
  ([EventStream] PulseVal ->) {
  propagatePulse(new Pulse(nextStamp(), value), this);
};

EventStream.prototype.mergeE = function(arry) ::
    [EventStream] Array<EventStream> -> EventStream {
  var deps = slice@[(EventStream)](arry,0);
  deps.push(this);
  return internalE(deps);
};

EventStream.prototype.constantE = function (constantValue) ::
    ([EventStream] PulseVal -> EventStream) {
      return createNode(
        [this],
        function(send,pulse) :: UpdaterT {
          pulse.value = constantValue;
          send(pulse);
        });
};

var constantE = function(e,v) :: EventStream, PulseVal -> EventStream {
  return e.constantE(v);
};

//is there a bug in this code? 3 arguments are given to createNode, where it
//only takes 2.
//what type of eventstream does this take? i think it's eventstreams of
//eventstreams... dnno quoite how to handle that one yet.
var createTimeSyncNode = function(nodes) :: Array<EventStream> -> EventStream {
  var nqs = map1@[(EventStream),(TSNodeT)](
    function(n) :: EventStream -> TSNodeT {
      var qpulse :: Array<EventStream> = [];
      return {q:qpulse,
              v:createNode(
                  [n],
                  function(s,p) :: UpdaterT {qpulse.push($es/*p.value*/); s(p);}
                  /*, nodes*/)};
    }, nodes);

  return createNode(
    map1@[(TSNodeT), (EventStream)](
      function(n) :: TSNodeT -> EventStream {return n.v;},nqs),
    function(s,p) :: UpdaterT {
      var allfull = fold1@[(TSNodeT),(bool)](
        function(n,acc) :: TSNodeT, bool -> bool {
          return (n.q.length!=0) && acc;},true,nqs);
      if(allfull) {
        //p.value should = res, but don't have parametrized pulses yet.
        var res = map1@[(TSNodeT),(EventStream)](
          function(n) :: TSNodeT -> EventStream { return n.q.shift();},nqs);
        //p.value = 666;
        s(p);
      }});
};

//This is up here so we can add things to its prototype that are in
//flapjax.combinators
var Behavior = function (event, init, updater) :: ([{...}]
  EventStream, PulseVal, (PulseVal -> PulseVal)?
    ~~> Behavior_constr_leave)
{
  this.last = init;
  var behave = this;

  //sendEvent to this might impact other nodes that depend on this event
  //sendBehavior defaults to this one
  this.underlyingRaw = event;

  //unexposed, sendEvent to this will only impact dependents of this behaviour

  //***: this is a pain. we do a refinement, but it is only visible in the
  //outer scope, not in the closure, so we can't just call updater
  //there...

  //it's overly safe. knowing that updater isn't re-assigned here lets
  //us know that updater will never be modified once this function
  //leaves. ah well.

  /*this.underlying = createNode(
    [event],
    ((typeof updater != "undefined") ?
     function (s, p) :: UpdaterT {
       behave.last = updater(p.value);
       p.value = behave.last;
       s(p);} :
     function (s, p) :: UpdaterT {
       behave.last = p.value;
       s(p);}));*/
  this.underlying = createNode(
    [event],
    function (s, p) :: UpdaterT {
      if (typeof updater != "undefined")
      {
        behave.last = updater(p.value);
        p.value = behave.last;
      }
      else
        behave.last = p.value;
      s(p);
    });
};
//Behavior.prototype = new Object();

var receiverE = function() :: (-> EventStream) {
  var evt = internalE();
  return evt;
};

// bindE :: EventStream a * (a -> EventStream b) -> EventStream b
/*EventStream.prototype.bindE = function(k) ::
  ([EventStream] (PulseVal -> EventStream) -> EventStream ) {
  var m = this;
  var prevE :: EventStream? = undefined;

  var array :: Array<EventStream> = [];
  var outE = createNode(array,
                        function(send,pulse) :: UpdaterT { send(pulse); });
  //outE.name = "bind outE"; //unimportant

  var inE = createNode([m], function (send,pulse) :: UpdaterT {
    var local_prevE = prevE;
    if (typeof local_prevE != "undefined") {
      removeListener(prevE,outE);
    }
    local_prevE = k(pulse.value);
    attachListener(local_prevE,outE);
  });
  //inE.name = "bind inE";

  return outE;
};*/

//***: following function doesn't work cause we can't assign to a 'global'
//union... =/. we need some way to treat closure variables differently.
//however, we can work around it this time with a 'first' variable,
//because prevE is only undefined before anything happens.

// bindE :: EventStream a * (a -> EventStream b) -> EventStream b
EventStream.prototype.bindE = function(k) ::
  ([EventStream] (PulseVal -> EventStream) -> EventStream) {
  /* m.sendsTo resultE
   * resultE.sendsTo prevE
   * prevE.sendsTo returnE
   */
  var m = this;
  //give prevE a filler value
  var prevE :: EventStream = zeroE(); //undefined;
  var first = true;

  var array :: Array<EventStream> = [];
  var outE = createNode(array,
                        function(send,pulse) :: UpdaterT { send(pulse); });

  var inE = createNode([m], function (send,pulse) :: UpdaterT {
    if (!first) { //typeof prevE != "undefined") {
      removeListener(prevE,outE);
    }
    prevE = k(pulse.value);
    attachListener(prevE,outE);
    first = false;
  });

  return outE;
};

/* Could be written as:
 *
 * e.bindE(function(v) { return oneE(f(v)); })
 */
EventStream.prototype.mapE = function(f) ::
  ([EventStream] (PulseVal -> PulseVal) -> EventStream) { //###
  return createNode([this],function(send,pulse) :: UpdaterT {
    pulse.value = f(pulse.value);
    send(pulse);
  });
};

//### pending parametrized pulses
EventStream.prototype.notE = function() :: ([EventStream] -> EventStream) {
  return this.mapE(function(v) :: (PulseVal -> PulseVal) {
                     v.pulsevalhax = (!v.pulsevalhax ? 1 : 0);
                     return v; });
};

var notE = function(e) :: (EventStream -> EventStream) {
  return e.notE();
};

EventStream.prototype.filterE = function(pred) ::
  ([EventStream] (PulseVal -> bool) -> EventStream) {
  // Can be a bindE
  return createNode([this],
    function(send,pulse) :: UpdaterT {
      if (pred(pulse.value)) { send(pulse); }
  });
};

var filterE = function(e,p) :: EventStream, (PulseVal -> bool) -> EventStream {
  return e.filterE(p);
};

EventStream.prototype.onceE = function () :: ([EventStream] -> EventStream) {
  var done = false;
  return createNode([this], function(send, pulse) :: UpdaterT {
                      if (!done) { done = true; send(pulse); } });
};
var onceE = function (e) :: EventStream -> EventStream { return e.onceE(); };

EventStream.prototype.skipFirstE = function ()::([EventStream] -> EventStream) {
  var skipped = false;
  return createNode([this], function(send, pulse) :: UpdaterT {
    if (skipped)
      send(pulse);
    else
      skipped = true;
  });
};

var skipFirstE = function (e) :: EventStream -> EventStream {
  return e.skipFirstE();
};

EventStream.prototype.collectE = function(init,fold) ::
  ([EventStream] PulseVal, (PulseVal, PulseVal -> PulseVal) -> EventStream) {
  var acc = init;
  return this.mapE(
    function (n) :: (PulseVal -> PulseVal) {
      var next = fold(n, acc);
      acc = next;
      return next;
    });
};

var collectE = function(e,i,f) ::
  (EventStream, PulseVal, (PulseVal, PulseVal -> PulseVal)
     -> EventStream) {
    return e.collectE(i,f);
};

// a.k.a. join
EventStream.prototype.switchE = function() :: ([EventStream] -> EventStream) {
  //xxx what? does bindE only take event streams of event streams? does
  //this only take eventstreams containing eventstreams?
  return this.bindE(function(v) :: PulseVal -> EventStream { return $es; //v;
    });
};

var switchE = function(e) :: EventStream -> EventStream { return e.switchE(); };

EventStream.prototype.ifE = function(thenE,elseE) ::
  ([EventStream] EventStream, EventStream -> EventStream) {
  var testStamp = -1;
  var testValue :: bool = false;

  //*** once again with the 'global union' crud. modify this slightly...
  createNode([this],function(_,pulse) :: UpdaterT {
               testStamp = pulse.stamp;
               testValue = !!pulse.value; });

  return mergeE([
    createNode([thenE],function(send,pulse) :: UpdaterT {
                 if (testValue && (testStamp == pulse.stamp)) {
                   send(pulse); } }),
    createNode([elseE],function(send,pulse) :: UpdaterT {
                 if (!testValue && (testStamp == pulse.stamp)) {
                   send(pulse); } })]);
};

//we could be restrictive and have test be U(bool, EventStream), but having
//it be any also works =D.
var ifE = function(test,thenE,elseE) ::
  any, EventStream, EventStream -> EventStream {
  if (test instanceof EventStream)
    { return test.switchE(); }//test.ifE(thenE,elseE); }
  else
    { return test ? thenE : elseE; }
};

//andE modified to take an array of nodes
var andE = function (nodes) :: Array<EventStream> -> EventStream {
  //### $pv should be 'true'.
  var acc = (nodes.length > 0) ? nodes[nodes.length - 1] : oneE($pv);

  for (var i = nodes.length - 2; i > -1; i--) {
    acc = ifE(
      nodes[i],
      acc,
      nodes[i].constantE($pv)); //### $pv = false
  }
  return acc;
};

EventStream.prototype.andE = function(others) ::
    ([EventStream] Array<EventStream> -> EventStream) {
  var deps = [this].concat(others);
  return andE(deps);
};

//modified to take array of nodes
var orE = function (nodes) :: Array<EventStream> -> EventStream {
  var acc = (nodes.length > 2)?
             nodes[nodes.length - 1] : oneE($pv); //### $pv = false
  for (var i = nodes.length - 2; i > -1; i--) {
    acc = ifE(
      nodes[i],
      nodes[i],
      acc);
  }
  return acc;
};

EventStream.prototype.orE = function(others) ::
    ([EventStream] Array<EventStream> -> EventStream) {
  var deps = [this].concat(others);
  return orE(deps);
};

var delayStaticE = function (event, time) :: EventStream, int -> EventStream {
  var resE = internalE();

  createNode(
    [event],
    function (s, p) :: UpdaterT {
      //have to add 'window.' here for now:
      window.setTimeout(
        function () :: (->) { sendEvent(resE, p.value);},
        time ); });

  return resE;
};

//moved from lower:
Behavior.prototype.valueNow = function() :: ([Behavior] -> PulseVal) {
  return this.last;
};
var valueNow = function(behavior) :: Behavior -> PulseVal {
  return behavior.valueNow();
};

Behavior.prototype.changes = function() :: ([Behavior] -> EventStream) {
  return this.underlying;
};
var changes = function (behave) :: Behavior -> EventStream {
  return behave.changes();
}


//delayE: Event a * [Behavior] Number ->  Event a
EventStream.prototype.delayE = function (time) ::
  ([EventStream] U(Behavior, int) -> EventStream) {
  var event = this;

  //*** had to move receiverEE out here. too-restrictive occurrence
  //typing!  it feels like 'define before use' could do something
  //about this. if we had block-level scoping, we wouldn'tst need to
  //do this
  var receiverEE = internalE();
  //if (time instanceof Behavior) {
  if (typeof time != "number") {
    var link :: {from::EventStream, towards::EventStream} = {
      from: event,
      towards: delayStaticE(event, 31337) //### 31337 --> valueNow(time))
    };

    //TODO: Change semantics such that we are always guaranteed to get
    //an event going out?

    var switcherE = createNode(
      [changes(time)],
      function (s, p) :: UpdaterT {
        removeListener(link.from, link.towards);
        link =  {
          from: event,
          towards: delayStaticE(event, 1337) //### 1337 --> p.value)
        };
        sendEvent(receiverEE, $pv); //### $pv --> link.towards);
      });

    var resE = receiverEE.switchE();

    sendEvent(switcherE, valueNow(time));
    return resE;
  }
  else {
    //^^^ if we do "time instanceof Behavior", time is still a union
    //here, for some reason. must fix.
    return delayStaticE(event, time);
  }
};

/* @@@ pending substtype being capture-free
var delayE = function(sourceE,interval) :: EventStream, int -> EventStream {
  return sourceE.delayE(interval);
};*/

//ask arjun how to do map
//mapE: ([Event] (. Array a -> b)) . Array [Event] a -> [Event] b
/*var mapE = function (fn //...*/


EventStream.prototype.snapshotE = function (valueB) ::
  ([EventStream] Behavior -> EventStream) {
  return createNode(
    [this],
    function (s, p) :: UpdaterT {
      p.value = valueNow(valueB);
      s(p);
    }
    );
};

//@@@ add this one substType captures works:
/*var snapshotE = function(triggerE,valueB) ::
    EventStream, Behavior -> EventStream {
  return triggerE.snapshotE(valueB);
};*/

EventStream.prototype.filterRepeatsE = function(optStart) ::
  ([EventStream] PulseVal? -> EventStream) {
//*** can't assign to 'prev', cause it's a global union =/..
// fix it by making prev not undefinable.
//  var hadFirst = optStart === undefined ? false : true;
//  var prev = optStart;

  if (typeof optStart == "undefined") {
    var hadFirst = false;
    var prev = $pv; //filler value
  }
  else
  {
    hadFirst = true;
    prev = optStart;
  }

  return this.filterE(function (v) :: PulseVal -> bool {
    if (!hadFirst || !(isEqual(prev,v))) {
      hadFirst = true;
      prev = v;
      return true;
    }
    else {
      return false;
    }
  });
};

var filterRepeatsE = function(sourceE,optStart) ::
  EventStream, PulseVal? -> EventStream {
  return sourceE.filterRepeatsE(optStart);
};

//*** changed this to use -1 instead of null
//credit Pete Hopkins
var calmStaticE = function (triggerE, time) :: EventStream, int -> EventStream {
  var out = internalE();
  createNode(
    [triggerE],
    function() :: (-> UpdaterT) {
      var towards :: TimeoutID = -1; //undefined;
      return function (s, p) :: UpdaterT {
        if (towards != -1) { window.clearTimeout(towards); }
        towards = window.setTimeout(
          function () :: (->) {
            towards = -1;
            sendEvent(out,p.value) },
          time );
      };
    }());
  return out;
};

//calmE: Event a * [Behavior] Number -> Event a
//*** the refinement for 'time' gets forgotton in the inner functions, aargh
EventStream.prototype.calmE = function(time) ::
  ([EventStream] U(Behavior, int) -> EventStream) {
  //if (time instanceof Behavior) {
  if (typeof time != "number") {
    var out = internalE();
    createNode(
      [this],
      function() :: (-> UpdaterT) {
        var towards = -1;
        return function (s, p) :: UpdaterT {
          if (typeof time == "number") throw "OMG OCCURR TYPE FAIL";
          if (towards !== -1) { window.clearTimeout(towards); }
          towards = window.setTimeout(
            function () :: (->) {
              if (typeof out == "undefined") throw "OT FAIL";
              towards = -1;
              sendEvent(out,p.value) },
            valueNow(time).pulsevalhax); //### remove .pulsevalhax
        };
      }());
    return out;
  }
  else {
    return calmStaticE(this,time);
  }
};

//@@@
/*var calmE = function(sourceE,interval) :: EventStream, U(Behavior,int)
                                       -> EventStream {
  return sourceE.calmE(interval);
};*/

EventStream.prototype.blindE = function (time) ::
  ([EventStream] U(Behavior, int) -> EventStream) {
  return createNode(
    [this],
    function () :: (-> UpdaterT) {
      /*var intervalFn = time instanceof Behavior ?
         function () :: (-> int) { return valueNow(time); } :
         function () :: (-> int) { return time; };*/
      var intervalFn = function() :: (-> int) {
        //if (time instanceof Behavior)
        if (typeof time != "number")
          return valueNow(time).pulsevalhax;
        else
          return time;
      };

      var lastSent = (new Date()).getTime() - intervalFn() - 1;
      return function (s, p) :: UpdaterT {
        var curTime = (new Date()).getTime();
        if (curTime - lastSent > intervalFn()) {
          lastSent = curTime;
          s(p);
        }
      };
    }());
};

//###
/*var blindE = function(sourceE,interval) {
  return sourceE.blindE(interval);
};*/

EventStream.prototype.startsWith = function(init) ::
  ([EventStream] PulseVal -> Behavior) {
  return new Behavior(this,init);
};

//###
/*var startsWith = function(e,init) {
  if (!(e instanceof EventStream)) {
    throw 'startsWith: expected EventStream; received ' + e;
  }
  return e.startsWith(init);
};*/

Behavior.prototype.switchB = function() :: ([Behavior] -> Behavior) {
  var behaviourCreatorsB = this;
  var init = valueNow(behaviourCreatorsB);

  var prevSourceE :: EventStream = $es; //*** filler. was: 'undefined;'
  var first = true;

  var receiverE = internalE(); //bugfix! 'new' was being used here.

  //XXX could result in out-of-order propagation! Fix!
  var makerE =
    createNode(
      [changes(behaviourCreatorsB)],
      function (_, p) :: UpdaterT{
        //### remove once parapoly stuff works.
        if (!(p.value instanceof Behavior)) { throw 'switchB: expected Behavior as value of Behavior of first argument'; } //SAFETY
        if (!first) { //typeof prevSourceE != "undefined") {
          removeListener(prevSourceE, receiverE);
        }
        first = false;

        prevSourceE = changes(p.value);
        attachListener(prevSourceE, receiverE);

        sendEvent(receiverE, valueNow(p.value));
      });

  if (init instanceof Behavior) {
    sendEvent(makerE, $pv); //### init);
  }

  return startsWith(
    receiverE,
    init instanceof Behavior? valueNow(init) : init);
};

var switchB = function (b) :: (Behavior -> Behavior) { return b.switchB(); };

//moved up:
var createTimerNodeStatic = function (interval) :: (int -> EventStream) {
  var node = internalE();
  //node.__timerId = __getTimerId();

  var fn = function () :: (->) {
    sendEvent(node, $pv);}; //###, (new Date()).getTime());};
  var timer = window.setInterval(fn, interval);

  //timerDisablers[node.__timerId] = function () {clearInterval(timer); };
  return node;
};

var _timerE_behavior = function (interval) :: Behavior -> EventStream {
  var receiverE = internalE();

  //the return
  var res = receiverE.switchE();

  //keep track of previous timer to disable it
  var prevE = createTimerNodeStatic(valueNow(interval).pulsevalhax);

  //init
  sendEvent(receiverE, $pv); //###, prevE);

  //interval changes: collect old timer
  createNode(
    [changes(interval)],
    function (_, p) :: UpdaterT {
      //disableTimerNode(prevE);
      prevE = createTimerNodeStatic(p.value.pulsevalhax);
      sendEvent(receiverE, $pv); //###, prevE);
    });

/*  res.__timerId = __getTimerId();
  timerDisablers[res.__timerId] = function () {
    disableTimerNode[prevE]();
    return;
  };*/

  return res;
};


var timerE = function (interval) :: U(Behavior, int) -> EventStream {
  //if (interval instanceof Behavior) {
  if (typeof interval != "number") {
    return _timerE_behavior(interval);
  } else {
    return createTimerNodeStatic(interval);
  }
};

//TODO test, signature
var timerB = function(interval) :: U(Behavior, int) -> Behavior {
  return startsWith(timerE(interval), $pv); //###< (new Date()).getTime());
};


//TODO test, signature
var delayStaticB = function (triggerB, time, init) ::
  Behavior, int, PulseVal -> Behavior {
  return startsWith(delayStaticE(changes(triggerB), time), init);
};

Behavior.prototype.delayB = function (time, init) ::
  ([Behavior] U(Behavior, int), PulseVal? -> Behavior) {
  var triggerB = this;
  //if (time instanceof Behavior) {
  if (typeof time != "number") {
    return startsWith(
      $es, /*delayE(
        changes(triggerB),
        time), //@@@ function doesnt work cause substype captures */
      typeof init != "undefined" ? init : valueNow(triggerB));
  } else {
    return delayStaticB(
      triggerB,
      time,
      typeof init != "undefined" ? init : valueNow(triggerB));
  }
};

var delayB = function(srcB, timeB, init) ::
  Behavior, U(Behavior, int), PulseVal? -> Behavior{
  return srcB.delayB(timeB,init);
};

//artificially send a pulse to underlying event node of a behaviour
//note: in use, might want to use a receiver node as a proxy or an identity map
Behavior.prototype.sendBehavior = function(val) ::
  ([Behavior] PulseVal ->) {
  sendEvent(this.underlyingRaw,val);
};

var sendBehavior = function (b,v) :: Behavior, PulseVal -> undefined {
  b.sendBehavior(v); };

//moved up:
//### all these behaviors must be parametrized
//$$$ im stuck without apply, here. will just have to make
//many many versions of the same function..
//%%% lack of LPs means we can't use filter here.
var liftB3 = function (fn, b1, b2, b3) :: forall a b c . (
  U((a, b, c -> PulseVal), Behavior),
  U(a, Behavior), U(b, Behavior), U(c, Behavior) -> Behavior) {

  //var args = slice(arguments, 1);
  //dependencies

  //luckily we can work around filter's limitations:
/*  var constituentsE =
    map(changes,
        filter(function (v) { return v instanceof Behavior; },
          arguments));*/

  var _arguments :: Array<any> = [fn, b1, b2, b3];
  var bs :: Array<Behavior> = [];
  for (var i=0; i < _arguments.length; i++) {
    var x = _arguments[i];
    if (x instanceof Behavior)
      bs.push(x);
  }
  var constituentsE = map1@[(Behavior),(EventStream)](changes, bs);

  //calculate new vals
  var getCur = function (v) :: U(Behavior, PulseVal) -> PulseVal {
    //^^^ fix once instanceof works in the else case
    //return v instanceof Behavior ? v.last : v;
    return $pv;
  };

  var ctx = this;
  var getRes = function () :: (-> PulseVal) {
    //### uber uber fail
    var func = $pvcast@[(a,b,c -> PulseVal)](getCur($pv)); //fn));
    return func($pvcast@[(a)](getCur($pv)),//b1)),
                $pvcast@[(b)](getCur($pv)),//b2)),
                $pvcast@[(c)](getCur($pv)));//b3)));
  };

  if(constituentsE.length == 1) {
    return new Behavior(constituentsE[0],getRes(),getRes);
  }

  //gen/send vals @ appropriate time

  //^^^ without the annotation on prevStamp, the type checker thinks
  //its type if U(int, undefined) for some reason..
  var prevStamp :: int = -1;

  var mid = createNode(constituentsE, function (s, p) :: UpdaterT {
      if (p.stamp != prevStamp) {
        prevStamp = p.stamp;
        s(p);
  }});
  return new Behavior(mid,getRes(),getRes);
};

//moved up:
//createConstantB: a -> Behavior a
var constantB = function (val) :: PulseVal -> Behavior {
  return new Behavior(internalE(), val);
};

//###
Behavior.prototype.ifB = function(trueB,falseB) ::
  ([Behavior] U(Behavior, PulseVal), U(Behavior, PulseVal) -> Behavior) {
  var testB = this;
  //TODO auto conversion for behaviour funcs

  //^^^ fix once !instanceof works
  //if (!(trueB instanceof Behavior)) { trueB = constantB(trueB); }
  //if (!(falseB instanceof Behavior)) { falseB = constantB(falseB); }
  trueB = $b;
  falseB = $b;
  //###
  return liftB3@[(PulseVal),(PulseVal),(PulseVal)](
    function(te,t,f) :: (PulseVal, PulseVal, PulseVal -> PulseVal) {
      return te ? t : f; },
    testB,trueB,falseB);
};

//will learn nothing new from the rest of em!

/////////////////////////////////////////////////////////////////////////////
// DOM Utilities
