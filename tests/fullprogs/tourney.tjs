var sessionId :: string?;

function saveSessionId() :: (->) {
  //match string used to be 'session\=\"(.*\"'
  var match = document.cookie.match('session=\"(.*)\"');
  if (typeof match != "undefined") { //(match) {
    sessionId = match[1]; }
}

function isLoggedIn() :: (-> bool) {
  //if (sessionId) { return true; }
  if (typeof sessionId != "undefined") { return true; }
  else {
    var match = document.cookie.match('session=\"(.*)\"');
    //sessionId = match && match[1];
    if (typeof match != "undefined"){  //(match) {
      sessionId = match[1];
    }
    else
      sessionId = undefined;
    return !!sessionId;
  }
}

/*var Date_shortMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul",
  "Aug","Sep","Oct","Nov","Dec"];*/

var Date_shortMonths :: Array<string> = ["Jan","Feb","Mar","Apr","May",
  "Jun","Jul", "Aug","Sep","Oct","Nov","Dec"];

//TODO: fix op precedence (== lower than &&)
//TODO: make if(x) work when x is not a bool.
var Date_prototype_formatRelative = function(thisd) :: (Date -> string) {
  //var now = new Date();
  var now :: Date?; //hack to not require a constructor for Date
  if (typeof now == "undefined") return "";

  if ((thisd.getDay() == now.getDay())&&(thisd.getMonth() == now.getMonth()) &&
      (thisd.getFullYear() == now.getFullYear())) {
    return (thisd.getHours() + (thisd.getMinutes() <= 9 ? ":0" : ":") +
            thisd.getMinutes());
  }
  else if (thisd.getFullYear() == now.getFullYear()) {
    return (thisd.getDate() + " " + Date_shortMonths[thisd.getMonth()]);
  }
  else {
    return (thisd.getDate() + " " + Date_shortMonths[thisd.getMonth()] + " "
            + (thisd.getFullYear() % 100));
  }
};

var LINK = function(elt) :: (U(HTMLElement, string) -> FlapjaxElement) {
  //pending var args working...
  //return A({className: "links", href: 'javascript:undefined'},elt);
  return makeFJE();
};

var isSuccess = function(v) :: {success :: bool} -> bool
                  { return v.success; };

//the real type of server_e is probably parametrized based on what
//the response should be. should def. at least take into account
//the parameter of the 2nd eventstream
function server_e(url,valueE) :: (string, EventStream -> EventStream) {
  //var response_e = receiver_e();
  var response_e :: EventStream = receiver_e();

  var onSuccess = function(transport) :: (XMLHttpRequest ->){
    saveSessionId();
    //response_e.sendEvent(transport.responseText.evalJSON(false));
    response_e.sendEvent(
      String_prototype_evalJSON(transport.responseText,false));
  };

  var onFailure = function(transport) :: (XMLHttpRequest ->) {
    //if (console && console.log) { console.log(transport); }
    var txt = (transport.responseText.length > 0)
              ? transport.responseText : "Session Expired";
    //pending dicts and varargs:
    /*modal(DIV({ className: 'shutdown'},
           txt,
            DIV(A({ style: { fontSize: '12px',color: '#ffffff' },
                    href: 'javascript:window.location.reload()'},
                  'Log In Again'))),
      one_e(true),200);*/
  };

  valueE.lift_e@[({session :: string}), (undefined)](
    function(val) :: ({session :: string} -> undefined) {
      if (typeof sessionId != "undefined") // (sessionId)
      { val.session = sessionId; }

      /*new Ajax.Request(url,
        { method: 'post'
        , parameters: val
        , onSuccess: onSuccess
        , onFailure: onFailure
        });*/
  });

  return response_e;
};

// buttonBar :: buttons * buttons * button
// -> { elem: element, clickE: EventStream buttons }
// button = String
// buttons = Array button
//
// You must ensure that the button names are unique, or all hell will
// break loose.

function buttonBar(buttons,rightButtons,initial) :: (
  Array<string>, Array<string>, string -> { elem :: HTMLElement,
                                            clickE :: EventStream}) {

  //rightButtons = rightButtons || [ ];
  if (typeof rightButtons == "undefined")
    rightButtons = [""]; //TODO: fix once array lits work.
  var last :: HTMLElement? = undefined;

  var clickEs = [ES]; //ES is something that is EventStream, since [] no work
  var targetEs :: Array<EventStream> = [ES];

  var left = [HE];
  var right = [HE];

  //left.push({className: 'buttonBar'}); //pending object-like arrays
  //push@[HTMLElement](left, {className : 'buttonBar'}); //pending dicts

  //buttons.each(
  //function(button) :: (string ->){
  function tmp1(button) :: (string ->){
    var elem = HE; //DIV({className: 'button'},button.toString());
    var e = clicks_e(elem);
    //targetEs.push(e);
    e.constant_e(button); //clickEs.push(e.constant_e(button));
    //left.push(elem);
    if (button == initial) {
      last = elem;
      elem.setStyle({ backgroundColor: '#ffff99', color: '#000000' });
    }
  }//);

  //right.push({className: 'right'});

 // rightButtons.each(
  //function (button) :: (string ->){
  function tmp2(button) :: (string ->){
    var elem = HE; //DIV({className: 'button'},button);
    var e = clicks_e(elem);
    //targetEs.push(e);
    e.constant_e(button); //clickEs.push(e.constant_e(button));
    //right.push(elem);
    if (button == initial) {
      last = elem;
      elem.setStyle({ backgroundColor: '#ffff99', color: '#000000' });
    }
  }//);

  //left.push(DIV.apply(this,right));

  //pending var args and apply working:
  //var clickE = merge_e.apply(this,clickEs);
  //var targetE = merge_e.apply(this,targetEs);
  var clickE = merge_e(clickEs); //TODO: add 'this' in here, too.
  var targetE = merge_e(targetEs);

  targetE.lift_e@[(HTMLElement),(undefined)](
    function(target) :: (HTMLElement->) {
      if (typeof last != "undefined") { //(last) {
        last.setStyle({ backgroundColor: '', color: '' });
      }
      last = target;
      last.setStyle({ backgroundColor: '#ffff99', color: '#000000' });
  });

  return { clickE: clickE
         , elem: HE }; //DIV.apply(this,left) };
};

// panelB :: EventStream String * { String : Elem or (-> Elem) } * Elem
// -> Behaviour Elem
// Consumes an eventstream carrying panel names, a dictionary that maps
// panel names to either a panel element or a thunk that returns the panel
// element and finally, the initial panel. Returns a behavior carrying the
// current panel
//
// Use a thunk in the dictionary to perform any setup when a panel is swapped
// into the view, even if the layout is static. It's amazing!
function panelB(panelE,panelDict,initialPanel) :: (
  EventStream, {name :: U(HTMLElement, (-> HTMLElement))}, HTMLElement ->
    Behavior) {
  /*//no longer necessary!
  if (!(initialPanel instanceof HTMLElement)) {
    return "error calling panelB: intialPanel is not an HTML element";
  }*/

  function tmp(name) :: (string -> HTMLElement) {
    var val = panelDict.name; //panelDict[name]; //pending dicts
    if (typeof(val) == "function") { return val(); }
    //else if (val instanceof HTMLElement) { return val; }
    //else { return false; // panelE violated the contract, fail silently
    else { return val; } //no other choices. yay for static typing.
  };
  function tmp2(val) :: (any -> bool) {
    return true; //val instanceof HTMLElement; //pending insteanceof
  };
  return panelE.lift_e@[(string),(HTMLElement)](tmp)
    .filter_e@[(any)](tmp2)
    .startsWith@[(HTMLElement)](initialPanel);

  /*return panelE.lift_e(function(name) {
    var val = panelDict[name];
    if (typeof(val) == "function") { return val(); }
    else if (val instanceof HTMLElement) { return val; }
    else { return false; // panelE violated the contract, fail silently
    }
  }).filter_e(function(val) { return val instanceof HTMLElement; })
  .startsWith(initialPanel);*/
};


function modal(content,hideShowE,zIndex) :: (
  HTMLElement, EventStream, int? -> EventStream) {
  var whiteout :: HTMLElement = HE; /*DIV({ style: { position: 'absolute',
                                height: '100%',
                                width: '100%',
                                left: '0px',
                                top: '0px',
                                zIndex: 100,
                                backgroundColor: 'black' }});*/ //pending dicts
  whiteout.setOpacity(0.3);
  document.body.appendChild(whiteout);
  //remove next 5 lines after we can do if (zIndex)
  var _zIndex = 101;
  if (typeof zIndex != "undefined") {
    if (zIndex != 0)
      _zIndex = zIndex;
  }
  var win :: HTMLElement = HE; /*DIV( { style: { position: 'absolute'
                          , left: '25%'
                          , minWidth: '400px'
                          , top: '10%'
                          , zIndex: _zIndex // zIndex || 101
                          } }
               ); //, content); //pending varargs */ //pending dicts

  document.body.appendChild(win);
  var hidden :: bool = false;

  function tmp(val) :: (any ->){
    if (!val && !hidden) {
      document.body.removeChild(whiteout);
      document.body.removeChild(win);
      hidden = true;
    }
  }
  hideShowE.lift_e@[(any), (undefined)](tmp);
  /*hideShowE.lift_e(function(val) {
    if (!val && !hidden) {
      document.body.removeChild(whiteout);
      document.body.removeChild(win);
      hidden = true;
    }
  });*/ //pending fixing function bug

  return hideShowE;
};