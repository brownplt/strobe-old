/* Necessary initializers: 1
 * Variable type annotations: 5
 * Explicit undefined tests: 1
 * Ad-hoc rewrites:
 *     - doNotPropagate, PQ to avoid bounded polymorphism
 *     - zip --> zip1, return obj vice array from lack of tuples
 *     - PQ: had to add placeholder functions so the constructor
 *       init was happy...
 *     - line 240: moved aroudn while loop to allow unpacking
 *     - attachListener for packing + unpacking workarounds
 *       notably, have to turn .concat into a for loop so you can
 *       unpack each thing separately.
 *     - lots of re-writing [] into var decls
 * Unhappy things:
 * - Hacked together "Math" to work in typedjs-core.idl by defining
 *   MathInterface, and then a constant Math that has that interface.
 * - Had to add implicit packing to assignment. dnno if that's good or not.
 * - Adding lots of local vars to unpack stuff
 * - dnno what zeroE's type should be.
 * - unification fails in ES_constantE.
 */
var slice = function (arr, start, stop)
  :: forall a . [a], Int, Int? -> [a] {
  var i = 0, len :: Int = arr.length, r :: [a] = [];
  if( typeof stop == "undefined" ) { stop = len; }
  if( stop < 0 ) { stop = len + stop; }
  if( start < 0 ) { start = len - start; }
  if( stop < start ) { i = start; start = stop; stop = i; }
  for( i = 0; i < stop - start; i++ ) { r[i] = arr[start+i]; }
  return r;
}

// JST: We intentionally omit isEqual for the moment, since it uses runtime type
// tests to defeat abstraction created by quantification.  The type system
// could be altered to support it.

/*var isEqual = function (a,b) :: forall x . x, x -> Bool {
  return (a == b) ||
    ((((typeof(a) == 'number') && isNaN(a)) || a == 'NaN') &&
     (((typeof(b) == 'number') && isNaN(b)) || b == 'NaN'));
}*/


var forEach = function(fn,arr) :: forall a . (a -> any), [a] -> Undefined {
  for (var i = 0 ; i < arr.length; i++) {
    fn(arr[i]);
  }
}

var member = function(elt, lst) :: forall a . a, [a] -> Bool {
  for (var i = 0; i < lst.length; i++) {
    // JST: if (isEqual(lst[i], elt)) {return true;}
    if (lst[i] == elt) {return true;}
  }
  return false;
}

// JST: Variable arity
/*
var zip = function(arrays) {
  if (arrays.length == 0) return [];
  var ret = [];
  for(var i=0; i<arrays[0].length;i++) {
    ret.push([]);
    for(var j=0; j<arrays.length;j++)
      ret[i].push(arrays[j][i]);
  }
  return ret;
}
*/
//ad-hoc re-write: turn returned array into object with $0 and $1 fields
var zip1 = function(array1, array2) :: forall a b . [a], [b] ->
                                       [{$0 :: a, $1 :: b}] {
  var ret :: [{$0 :: a, $1 :: b}] = [];
  for (var i=0; i < array1.length; i++) {
    ret.push({$0: array1[i], $1: array2[i]});
  }
  return ret;
}

// JST: variable arity
/*
//map: (a * ... -> z) * [a] * ... -> [z]
var map = function (fn) {
  var arrays = slice(arguments, 1);
  if (arrays.length === 0) { return []; }
  else if (arrays.length === 1) {
    var ret = [];
    for(var i=0; i<arrays[0].length; i++) {ret.push(fn(arrays[0][i]));}
    return ret;
  }
  else {
    var ret = zip(arrays);
    var o = new Object();
    for(var i=0; i<ret.length; i++) {ret[i] = fn.apply(o,ret[i]);}
    return ret;
  }
}
*/
var map1 = function(f,src) :: forall a b . (a -> b), [a] -> [b]{
  var dest :: [b] = [ ];
  for (var i = 0; i < src.length; i++) { dest.push(f(src[i])); }
  return dest;
}


var filter = function (predFn, arr) :: forall a . (a -> Bool), [a] -> [a] {
  var res :: [a] = [];
  for (var i = 0; i < arr.length; i++) {
    if (predFn(arr[i])) { res.push(arr[i]); }
  }
  return res;
}

// JST: Variable arity
/*
//fold: (a * .... * accum -> accum) * accum * [a] * ... -> accum
//fold over list(s), left to right
var fold = function(fn, init) {
  var lists = slice(arguments, 2);
  if (lists.length === 0) { return init; }
  else if(lists.length === 1) {
    var acc = init;
    for(var i = 0; i < lists[0].length; i++) {
      acc = fn(lists[0][i],acc);
    }
    return acc;
  }
  else {
    var acc = init;
    for (var i = 0; i < lists[0].length; i++) {
      var args = map( function (lst) { return lst[i];},
            lists);
      args.push(acc);
      acc = fn.apply({}, args);
    }
    return acc;
  }
};

//foldR: (a * .... * accum -> accum) * accum * [a] * ... -> accum
//fold over list(s), right to left, fold more memory efficient (left to right)
var foldR = function (fn, init) {
  var lists = slice(arguments, 2);
  if (lists.length === 0) { return init; }
  else if(lists.length === 1) {
    var acc = init;
    for(var i=lists[0].length - 1; i > -1; i--)
      acc = fn(lists[0][i],acc);
    return acc;
  }
  else {
    var acc = init;
    for (var i = lists[0].length - 1; i > -1; i--) {
      var args = map( function (lst) { return lst[i];},
            lists);
      args.push(acc);
      acc = fn.apply({}, args);
    }
    return acc;
  }
};
*/

//////////////////////////////////////////////////////////////////////////////
// Flapjax core

constructor DoNotPropagate() :: -> {} {
}
var doNotPropagate = new DoNotPropagate();
constructor Pulse(stamp, value) :: forall p . Int, p
                                -> { stamp :: Int, readonly value :: p }
{
  // Timestamps are used by liftB (and ifE). Since liftB may receive multiple
  // update signals in the same run of the evaluator, it only propagates the
  // signal if it has a new stamp.
  this.stamp = stamp;
  this.value = value;
}

var lastRank = 0;

constructor EventStream(nodes, updater)
 :: forall x y .
      [exists z . EventStream[z, x]:],
      (this :: EventStream[x,y]:,
       (Pulse[y]: -> Undefined), Pulse[x]: -> Undefined)
 -> { sendsTo :: [exists z. EventStream[y, z]:],
      rank :: Int,
      //updater takes an x, transforms it into a y,
      //and then passes that y along to the sender function.
      updater :: (this :: EventStream[x,y]:,
                  (Pulse[y]: -> Undefined),
                   Pulse[x]: -> Undefined)
    }
{
 this.updater = updater;
 this.sendsTo = []; // forward link
 this.rank = 0;

 for (var i = 0; i < nodes.length; i++) {
   var ni :: unpack a = nodes[i];
   ni.sendsTo.push(this);
 }

 this.rank = ++lastRank;
}

constructor PQ() :: -> {
  insert :: (this :: PQ:, (exists x z . {
                             k :: Int,
                             n :: EventStream[x, z]:,
                             v :: Pulse[x]:}) -> Undefined),
  isEmpty :: (this :: PQ: -> Bool),
  pop :: (this :: PQ:, ->  (exists x z . {
                             k :: Int,
                             n :: EventStream[x, z]:,
                             v :: Pulse[x]:})),
  val :: [(exists x z . {
             k :: Int,
             n :: EventStream[x, z]:,
             v :: Pulse[x]:})]
}
{
  //placeholders:
  this.val = [];
  this.insert = function (b) :: (this :: PQ:, (exists x z . {
                             k :: Int,
                             n :: EventStream[x, z]:,
                             v :: Pulse[x]:}) -> Undefined) {};
  this.isEmpty = function () :: (this :: PQ:, -> Bool) { return true; }
  this.pop = function () :: (this :: PQ:, -> (exists x z . {
                             k :: Int,
                             n :: EventStream[x, z]:,
                             v :: Pulse[x]:})) { return this.val[0]; }

  //now the real functions:
  var ctx = this;
  this.insert = function (kv_) :: (this :: PQ:, (exists x z . {
                   k :: Int,
                   n :: EventStream[x, z]:,
                   v :: Pulse[x]:}) -> Undefined) {
    var kv :: unpack x1 z1 = kv_;
    ctx.val.push(kv);
    var kvpos = ctx.val.length - 1;

    while (1) {
      var midval :: unpack x2 z2 = ctx.val[Math.floor((kvpos-1)/2)];
      if (!(kvpos > 0 && kv.k < midval.k)) break;

      var oldpos = kvpos;
      kvpos = Math.floor((kvpos-1)/2);
      ctx.val[oldpos] = ctx.val[kvpos];
      ctx.val[kvpos] = kv;
    }
  };
  this.isEmpty = function () :: (this :: PQ:, -> Bool) {
    return ctx.val.length === 0;
  }

  this.pop = function () :: (
               this :: PQ:, -> (
                 exists x z . {
                   k :: Int,
                   n :: EventStream[x, z]:,
                   v :: Pulse[x]:})) {
    if(ctx.val.length == 1) {
      var val :: unpack a b = ctx.val.pop();
      return val; //ctx.val.pop();
    }
    var ret = ctx.val.shift();
    ctx.val.unshift(ctx.val.pop());
    var kvpos = 0;
    var kv :: unpack a0 b0 = ctx.val[0];
    while(1) {
      var kvp1 :: unpack ap1 bp1 = ctx.val[kvpos*2+1];
      var kvp2 :: unpack ap2 bp2 = ctx.val[kvpos*2+2];

      var leftChild = (kvpos*2+1 < ctx.val.length
                       ? kvp1.k
                       : kv.k+1);
      var rightChild = (kvpos*2+2 < ctx.val.length
                        ? kvp2.k
                        : kv.k+1);

      if(leftChild > kv.k && rightChild > kv.k)
	break;
      else if(leftChild < rightChild) {
	ctx.val[kvpos] = kvp1;   //implicit packing, here
	ctx.val[kvpos*2+1] = kv;
	kvpos = kvpos*2+1;
      }
      else {
	ctx.val[kvpos] = kvp2;
	ctx.val[kvpos*2+2] = kv;
	kvpos = kvpos*2+2;
      }
    }
    return ret;
  };
};


var stamp = 1;
var nextStamp = function () :: -> Int { return ++stamp; };

//propagatePulse: Pulse * Array Node ->
//Send the pulse to each node
var propagatePulse = function (pulse, node) ::
  forall a . Pulse[a]:, (exists z . EventStream[a,z]:) -> Undefined {
  var queue = new PQ(); //topological queue for current timestep
  var unnode :: unpack blah = node;
  queue.insert({k:unnode.rank,n:unnode,v:pulse});
  while(!(queue.isEmpty())) {
    var qv :: unpack x y = queue.pop();
    //qv.n is EventStream taking x, giving y
    //qv.v is the current pulse to be sent, an x
    //qv.n.updater :: (y -> Undef), x -> Undef
    //  that is, it takes an x, makes a y from it, and sends it

    qv.n.updater(
      function(nextPulse) :: (Pulse[y]: -> Undefined) {
        for(var i=0; i<qv.n.sendsTo.length;i++) {
          //sendsTo is a node that takes the result, a y, and
          //outputs anything, a blah2:
          var sendsTo :: unpack blah2 = qv.n.sendsTo[i];
          //nextPulse is the next pulse to be sent, an 'x'
          //this function 'sends' it...
          queue.insert({k:sendsTo.rank,n:sendsTo,v:nextPulse});
        }
      }, new Pulse(qv.v.stamp,qv.v.value));
  }
};

var createNode = function (nodes, updater) :: (
  forall x y . [exists z . EventStream[z, x]:],
               (this :: EventStream[x, y]:,
                (Pulse[y]: -> Undefined), Pulse[x]: -> Undefined)
               -> EventStream[x,y]:) {
  return new EventStream(nodes, updater);
}

var attachListener = function(node, dependent) :: (
  forall x y z . EventStream[x,y]:,
                 EventStream[y,z]:
                 -> Undefined) {
  node.sendsTo.push(dependent);
  if (node.rank > dependent.rank) {
    var lowest = lastRank + 1;
    //var q = [dependent]; //this line makes type checker thing
    //                     //it doesn't have 'splice' field. should investigate

    var q :: [exists a b . EventStream[a,b]:] = []; //[dependent]
    q.push(dependent);
    while (q.length) {
      var cur :: unpack a b = q.splice(0,1)[0];
      cur.rank = ++lastRank;
      //q = q.concat(sendsTo);
      for (var i = 0; i < cur.sendsTo.length; i++) {
        var sendsTo :: unpack c = cur.sendsTo[i];
        q.push(sendsTo);
      }
    }
  }
}

//removeListener: Node * Node -> Boolean
//remove flow from node to dependent
//note: does not remove flow as counting for rank nor updates parent ranks
//look ma, no type annotation srequired!
var removeListener = function (node, dependent) :: (
  forall x y z . EventStream[x,y]:,
                 EventStream[y,z]:
                 -> Bool) {
  var foundSending = false;
  for (var i = 0; i < node.sendsTo.length && !foundSending; i++) {
    if (node.sendsTo[i] == dependent) {
      node.sendsTo.splice(i, 1);
      foundSending = true;
    }
  }

  return foundSending;
};

// An internalE is a node that simply propagates all pulses it
// receives.  It's used internally by various combinators.

var internalE = function(dependsOn)  ::
  (forall a . U(Undefined, [(exists z . EventStream[z,a]:)])
     -> EventStream[a,a]:) {
  var arry :: [(exists z . EventStream[z, a]:)] = [];
  if (typeof dependsOn != "undefined") {
    arry = dependsOn;
  }

  return createNode(
    arry,
    function(send,pulse) :: (this :: EventStream[a, a]:,
                (Pulse[a]: -> Undefined), Pulse[a]: -> Undefined) {
      send(pulse);
    });
}

var zeroE = function() :: forall a . (-> (exists z . EventStream[z,a]:)) {
  var arry :: [exists z. EventStream[z,Any]:] = [];
  return createNode(
    arry,
    function(send,pulse) :: (this :: EventStream[Any,a]:,
                             (Pulse[a]: -> Undefined), Pulse[Any]:
                              -> Undefined) {
      //throw ('zeroE : received a value; zeroE should not receive a value; the value was ' + pulse.value);
  });
};

//note that this creates a new timestamp and new event queue
var sendEvent = function (node, value) :: forall a . (
  (exists z . EventStream[a,z]:), a -> Undefined) {
  propagatePulse(new Pulse(nextStamp(), value),node);
};

//immediately send the pulse once
var oneE = function(val) :: (forall a . a -> EventStream[a,a]:) {
  var sent = false;
  var arry :: [exists z . EventStream[z,a]:] = [];
  var evt = createNode(
    arry,
    function(send,pulse) :: (this :: EventStream[a,a]:,
                             (Pulse[a]: -> Undefined), Pulse[a]:
                             -> Undefined) {
      if (sent) {
        throw ('oneE : received an extra value');
      }
      sent = true;
      send(pulse);
    });
  window.setTimeout(
    function() :: (-> Undefined) {
      sendEvent@[a](evt,val); },
    0);
  return evt;
};

// a.k.a. mplus; mergeE(e1,e2) == mergeE(e2,e1)
var mergeE2 = function(e1, e2) :: forall a .
  (exists z . EventStream[z,a]:), (exists z . EventStream[z,a]:)
  -> (exists z . EventStream[z,a]:) {
  return internalE@[a]([e1, e2]);
};
var mergeE = function(es) :: forall a .
  [(exists z . EventStream[z,a]:)] -> (exists z . EventStream[z,a]:) {
  if (es.length == 0)
    return zeroE@[a]();
  return internalE@[a](es);
};

//you can only merge this event stream if it has 1 type arg?
var ES_mergeE = function(this_, es) :: (forall a .
    EventStream[a, a]:, [(exists z . EventStream[z, a]:)]
    -> EventStream[a, a]:) {
  var deps = es;
  deps.push(this_);
  return internalE@[a](deps);
}

var ES_constantE = function(this_, constantValue) :: (forall p q a .
     EventStream[p, q]:, a -> EventStream[q,a]:) {
  //why is implicit packing failing here?
  var theAttached :: (exists z . EventStream[z, q]:) =
     pack p (exists z . EventStream[z, q]:) in this_;
  var attchArray = [theAttached];
  return createNode@[q,a]( //XXX: unification fails here, must do it manually
    attchArray,
    function(send, pulse) :: (this :: EventStream[q,a]:,
                              (Pulse[a]: -> Undefined), Pulse[q]: -> Undefined){
      var newP = new Pulse(pulse.stamp, constantValue);
      send(newP);
    });
}

/*
  var createNode = function (nodes, updater) :: (
  forall x y . [exists z . EventStream[z, x]:],
               (this :: EventStream[x, y]:,
                (Pulse[y]: -> Undefined), Pulse[x]: -> Undefined)
               -> EventStream[x,y]:) {

var propagatePulse = function (pulse, node) ::
  forall a . Pulse[a]:, (exists z . EventStream[a,z]:) -> Undefined {

*/

