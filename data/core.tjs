type Object :: rec Object . {
  constructor :: (any... -> any), //super-type of all functions
  hasOwnProperty :: ([Object] string -> bool),
  isPrototypeOf :: ([Object] {} -> bool),
  propertyIsEnumerable :: ([Object] string -> bool),
  toLocaleString :: ([Object] -> string),
  toString :: ([Object] -> string),
  valueOf :: ([Object] -> any)
};


external Number_ :: {
  //static constants
  MAX_VALUE :: double,
  MIN_VALUE :: double,
  NaN :: double,
  NEGATIVE_INFINITY :: double,
  POSITIVE_INFINITY :: double
};

external Math :: {
  floor :: (double -> int),
  random :: (-> double),
};

type String :: rec String . {
  length :: int,
  match :: ([String] string -> Array<string>?),
  toString :: ([String] -> string)
};


type Boolean :: rec Boolean . {
  valueOf :: ([Boolean] -> bool),
  toString :: ([Boolean] -> string)
};

type RegExp :: rec RegExp . {global :: bool,
                ignoreCase :: bool,
                lastIndex :: int,
                multiline :: bool,
                source :: string,
                exec :: ([RegExp] string -> Array<string>),
                test :: ([RegExp] string -> bool)};

//conversion to boolean func (available in pJS):
external Boolean :: (any -> bool);

/*
type String :: {length :: int,
                charAt :: ,
                charCodeAt :: ,
                concat :: ,
                indexOf:: ,
                lastIndexOf :: ,
                localCompare :: ,
                match :: ,
                replace :: ,
                search :: ,
                slice :: ,
                split :: ,
                substr :: ,
                substring :: ,
                toLowerCase :: ,
                toUpperCase :: ,
*/

//'static' methods of Date:
/*external Date :: {parse :: (string -> int),
                  UTC :: (int, int, int?, int?, int?, int?, int? -> int)};*/

type Date :: rec self . {getDate :: ([self] -> int),
                         getDay :: ([self] -> int),
                         getFullYear :: ([self] -> int),
                         getHours :: ([self] -> int),
                         getMilliseconds :: ([self] -> int),
                         getMinutes :: ([self] -> int),
                         getMonth :: ([self] -> int),
                         getSeconds :: ([self] -> int),
                         getTime :: ([self] -> int),
                         getTimezoneOffset :: ([self] -> int),
                         getUTCDate :: ([self] -> int),
                         getUTCDay :: ([self] -> int),
                         //...
                         getYear :: ([self] -> int),
                         setTime :: ([self] int -> int)
                        };
external Date :: ([{...}] int?, int?, int?, int?, int?, int?, int? ~~> Date);




//hax until arrays act like objects:
external push :: forall a . Array<a>, a ->;
external sort :: forall a . Array<a>, (a, a -> int) -> Array<a>;
external Array_length :: forall a. Array<a> -> int;
external unshift :: forall a. Array<a>, a -> int; //should be varargs

//prototype:
external Array_each :: forall a. Array<a>, (a -> ) ->;



external document :: HTMLDocument;

type TimeoutID  :: int; //this should really be sealed somehow.
type IntervalID :: int; //this should really be sealed somehow.

external window :: {
  document :: HTMLDocument,

  setTimeout    :: ((any... -> any), int -> TimeoutID),
  setInterval   :: ((any... -> any), int -> IntervalID),
  clearTimeout  :: (TimeoutID ->),
  clearInterval :: (IntervalID ->),
};

//AJAX
type XMLHTTPRequest :: {};

//Prototype
external String_prototype_evalJSON :: (string, bool -> {}); //TODO: blah eval!!!
external $F :: (HTMLElement -> U(string, Array<string>));
external $Fs :: (HTMLElement -> string); //guaranteed one-string version of $F
external Object_toJSON :: (any -> string?);
external Object_toJSON2 :: (any -> string); //the always-ret-val version

